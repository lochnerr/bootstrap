#!/bin/sh

# /usr/local/bin/bootstrap-startup

set -e

# This script is designed to allow automated startup of generic linux images.

# In a bare-metal environment, the image would typically be a custom live (run-from-ram)
# image booted from a usb stick or DVD or even via pxe.

# In a VM environment, the image would be a cloud-init image booted from a virtual disk volume
# with a corresponding cloud-init cidata volume or a live alpine bootstrap iso.

# The bootstrap process does the following on startup:

# Searches for a bootstrap device.
# Mounts the bootstrap device on /mnt.
# Copies /mnt/bootstrap files to /tmp/bootstrap.
# Unmounts /mnt.
# Mount persistent /srv directory, unless not required.
# Add /srv/local/bin to path, if it exists.
# Mount persistent root.
# Mount persistent home.
# Copy ssh identifiers.
# Setup persistent apk cache for alpine.
# Note: The Local admin password gets set in the create script (via kickstart).
# Stop the libvirtd, if it exists on the boot device.
# Bind xen and libvirt directories (if needed).
# Sets up networking (based on the bootstrap files).
# Restarts networking, if required.
# Start the libvirtd, if it exists on the boot device.
# If there is a /tmp/bootstrap/startup or /tmp/bootstrap/start script from the bootstrap volume, execute it.

# Note. If no bootstrap device is found, the process does the following instead:

# Start the libvirtd, if it exists on the boot device.
# Execute the startup script.

# On shutdown:

# Remounts the bootstrap device on /mnt.
# Copies network changes back to the bootstrap device for persistence.
# Unmounts /mnt.
# If there is a /tmp/bootstrap/shutdown or /tmp/bootstrap/stop script from the bootstrap volume, execute it.

# The bootstrap environment must be identified: bare metal or virtual. This
# determines the bootstrap search order.

# If running in a dom0, it is bare metal.
# If running in a domU, it is virtual.
# If /dev/vdX devices exist, it is virtual (kvm).
# Otherwise, assume bare metal.

# The search order for virtual is:
# xen: /dev/xvdX devices.
# kvm: /dev/vdX devices.

# The search order for bare metal is:
# 1) /dev/vmh01/btrfs_a (backward compatibility).
# 2) lvm2 partitions containing 'bootstrap' in their name.
# 3) /dev/sdX devices.
# 4) all other lvm2 partitions.

# A match is found when the device is mounted on /mnt and
# there is a /mnt/bootstrap directory.

# The log directory
LOG="/tmp/bootstrap.log"
LOG="${LOG:-/dev/stdout}"

[ "$1" = "test" ] && test="true"

log() {
  echo "$(date +%H:%M:%S) $1" >>$LOG
  logger -t bootstrap "$1" || :
  ####echo "$1" | tee -a $LOG
}

try_device() {
  [ -z "$1" ] && return
  local rc="1"
  local blkid
  blkid="$(blkid -s TYPE $1 || :)"
  local fs_type
  fs_type=$(echo $blkid | cut -d '"' -f2)
  if [ -n "$fs_type" ]; then
      if echo 'btrfs ext4 vfat xfs ext3 ext2' | grep "$fs_type" >/dev/null 2>&1 ; then
          log "Trying device: $1 ($fs_type)"
          if mount -v -t $fs_type $1 /mnt >/dev/null; then
            if [ -d /mnt/bootstrap ]; then
              cp -a /mnt/bootstrap /tmp
              # Create mount script for use in shutdown (to persist network changes)."
              echo "#!/bin/sh" >/tmp/mount-bootstrap
              echo "mnt=\${1:-/mnt}" >>/tmp/mount-bootstrap
              echo "umount \$mnt 2>/dev/null || :" >>/tmp/mount-bootstrap
              echo "mount -v -t $fs_type $1 \$mnt" >>/tmp/mount-bootstrap
              chmod +x /tmp/mount-bootstrap
              # Indicate success.
              log "Found bootstrap directory on device."
              rc="0"
            else
              log "No bootstrap directory on device."
            fi
            umount /mnt || :
          else
            log "Device mount failed."
          fi
      else
        log "Not trying device: $1 ($fs_type)"
      fi
  fi
  return $rc
}

try_swaps() {
  log "Trying swaps in /dev/${1}*."
  for dev in $(ls /dev/${1}* 2>/dev/null && true); do
    local blkid
    local fs_type
    blkid="$(blkid -s TYPE $dev || :)"
    fs_type=$(echo $blkid | cut -d '"' -f2)
    if [ "$fs_type" = "swap" ]; then
      log "Mounting swap device $dev"
      SWAP_MOUNTED="true"
      swapon $dev && true
      break
    fi
  done
  return 0
}

try_device_node() {
  log "Trying devices in /dev/${1}*."
  for dev in $(ls /dev/${1}* 2>/dev/null && true); do
    if try_device $dev ; then
      echo "$dev"
      break
    fi
  done
  return 0
}

wait_for_lvs() {
  # Wait for the volumes to become active.  This can take a while if there are many volumes.
  while (( "$#" )); do
    local vg=$1
    local lv=$2
    local i
    shift 3
    for i in {1..30} ; do
      local lv_attr="$(lvs $vg/$lv --noheadings -o lv_attr)"
      if [ "${lv_attr:6:1}" = "a" ]; then
        log "Volume $vg/$lv is active."
        break
      elif [ "${lv_attr:6:1}" = "-" ] || [ "${lv_attr:6:1}" = "i" ]; then
        log "Waiting for logical volume $vg/$lv to become active:${lv_attr}."
        sleep 3s
      else
        log "Warning: volume $vg/$lv has unexpected attributes:${lv_attr}."
        break
      fi
    done
    [ "${lv_attr:6:1}" != "a" ] && log "Warning: volume $vg/$lv did not become active."
  done
  return 0
}

process_lv() {
  wait_for_lvs $@
  # Now, hopefully the volumes are all online.  
  # Try them one at a time.
  while (( "$#" )); do
    local vg=$1
    local lv=$2
    shift 3
    if try_device "/dev/$vg/$lv" ; then
      echo "/dev/$vg/$lv"
      return 0
    fi
  done
  return 0
}

try_lvs() {
  msg="Trying logical volumes named '$1'."
  local inverse
  if [ -n "$2" ]; then
    msg="Trying volumes not named '$1'."
    inverse="-v"
  fi
  log "$msg"
  if [ ! -z "$(command -v lvs 2> /dev/null)" ]; then
    local scan="$(lvs --noheadings -o vg_name,lv_name,lv_attr | sort | grep $inverse [[:space:]]*$1 || :)"
    local rv=""
    if [ -n "$scan" ]; then
      rv=$(process_lv $scan)
    else
      log "No volumes found."
    fi
    echo $rv
  fi
}

do_bare_metal() {
  local rv
  # Alpine needs vgscan.
  if [ -x /sbin/setup-alpine ]; then
    log "Doing vgscan."
    vgscan >/dev/null 2>&1 || :
  fi
  log "Bare Metal $1"
  # Try logical volume names containing 'bootstrap'.
  [ -z "$rv" ] && rv="$(try_lvs bootstrap)"
  # Try disk partitions.
  [ -z "$rv" ] && rv="$(try_device_node nvme?)"
  [ -z "$rv" ] && rv="$(try_device_node sd)"
  if [ -z "$rv" ] && [ -d /srv/bootstrap ]; then
    log "Directory /srv/bootstrap exists."
    cp -a /srv/bootstrap /tmp
    # Create mount script for use in shutdown (to persist network changes)."
    echo "#!/bin/sh" >/tmp/mount-bootstrap
    chmod +x /tmp/mount-bootstrap
    rv="0"
  fi
  [ -z "$rv" ] && log "Warning: No bootstrap device found."
  echo "$rv"
}

find_and_copy_bootstrap_files() {
  local rv
  # See: https://wiki.xenproject.org/wiki/Xen_FAQ_Dom0#How_do_I_tell_if_I.27m_running_in_a_dom0_or_a_domU.3F
  # Note the comment: Some domUs will have the file and some will not.
  touch /tmp/skip_network_reconfig
  if [ -e /proc/xen/capabilities ]; then
    if grep -q control_d /proc/xen/capabilities; then
      rm /tmp/skip_network_reconfig
      rv="$(do_bare_metal dom0)"
    else
      log "VM xen domU xvd"
      rv="$(try_device_node xvd)"
    fi
  elif [ -d /proc/xen ]; then
    log "VM xen xvd"
    rv="$(try_device_node xvd)"
  elif [ -L /dev/xvda ]; then
    # The only time /dev/xvda is a link is in aws nitro.
    # This apppears to only apply to AWS Linux 2 instances.
    log "VM AWS Nitro"
    rv="$(try_device_node nvme?)"
  elif [ -n "$(mount | grep "^/dev/nvme0n1p1 on / " || :)" ]; then
    # NVME device mounted on root.
    log "VM AWS Nitro 2"
    rv="$(try_device_node nvme?)"
  elif [ -e /dev/kvm ]; then
    # If the /dev/kvm device exists, this is a KVM host.
    log "KVM Host."
    rm /tmp/skip_network_reconfig
    rv="$(do_bare_metal kernel)"
  elif ls /dev/vd* 2>/dev/null >/dev/null; then
    log "VM kvm vd"
    rv="$(try_device_node vd)"
  elif ls /dev/sd* 2>/dev/null >/dev/null; then
    log "VM kvm sd"
    rv="$(try_device_node sd)"
  else
    log "No bootstrap device found."
  fi
  echo "$rv"
}

# For testing, a custom bootstrap-startup file can be placed in /srv/bootstrap/bootstrap-startup.
# Once the bootstrap files have been copied, the standard process will "exec" the custom script
# which will continue with the files previously copied.
MODE="standard"
# This works with dash and bash, unlike ${0:1:3}.
[ "$(echo $0 | cut -d '/' -f 2)" = "tmp" ] && MODE="custom"

if [ "$MODE" = "standard"  ]; then

  # Put this in the dmesg log.
  echo "Entering ${0}." >/dev/kmsg

  # Delete existing /tmp/bootstrap files prior to searching for them on external volumes.
  rm -rf /tmp/bootstrap
  rm -f /tmp/mount-bootstrap
  rm -f /tmp/bootstrap.log

  # If alpine, load btrfs module.
  if [ -x /sbin/setup-alpine ]; then
    modprobe btrfs
  fi

  # Find and copy bootstrap files.
  res="$(find_and_copy_bootstrap_files)"
  if [ ! -z "$res" ]; then
    log "Bootstrap files successfully copied."
    # Exec the custom script, if there is one.
    if [ -x /tmp/bootstrap/bootstrap-startup ]; then
      log "Chaining to custom bootstrap startup script."
      exec /tmp/bootstrap/bootstrap-startup
      log "This should never be reached."
    fi
  else
    log "Bootstrap files not copied."
  fi
  log "Continuing with standard bootstrap process."
else
  log "Continuing with custom bootstrap process."
fi

# The root account is sometimes open with no password. If it is, lock it.
if grep '^root::' /etc/shadow ; then
  log "Locking unlocked root account."
  sed -i 's/^root::/root:!locked:/' /etc/shadow
fi

# If running as LiveOS, enable password-less sudo for admin user.
if [ -e /run/initramfs/live/LiveOS/squashfs.img ]; then
  log "Enabling sudo for admin user."
  echo "admin    ALL=(ALL)   NOPASSWD: ALL" >/etc/sudoers.d/admin
  # live-xen-fedora builds do not enable NetworkManager.
  # This allows network-scripts to be copied prior to starting the network.
  # But, if there are no network-scripts, it will not be started.
  # This forces all live-xen-fedora builds to start networking.
  NETWORK_RECONFIGURED="true"
fi

# Try to mount first swap device.
[ -z "$SWAP_MOUNTED" ] && ls /dev/nvme?* >/dev/null 2>&1 && try_swaps nvme?
[ -z "$SWAP_MOUNTED" ] && ls /dev/xvd*   >/dev/null 2>&1 && try_swaps xvd
[ -z "$SWAP_MOUNTED" ] && ls /dev/vd*    >/dev/null 2>&1 && try_swaps vd

# Source bootstrap options, if available.
[ -e /tmp/bootstrap/bootstrap.conf ] && . /tmp/bootstrap/bootstrap.conf

if [ -n "$HOST" ]; then
  if [ -x /sbin/setup-alpine ]; then
    # Alpine doesn't like fqdn.
    log "Setting hostname to ${HOST}."
    /sbin/setup-hostname "$(echo $HOST | cut -d '.' -f 1)"
    /etc/init.d/hostname --quiet restart
  else
    FQDN=$HOST
    [ -n "$DOMAIN" ] && FQDN="${FQDN}.$DOMAIN"
    log "Setting hostname to ${FQDN}."
    if [ ! -z "$(command -v hostnamectl 2> /dev/null)" ]; then
      hostnamectl set-hostname $FQDN
    else
      hostname $FQDN
    fi
  fi
fi

[ ! -z "$test" ] && exit 0

# Generic service control function.
service_control() {

  if [ ! -z "$(command -v systemctl 2> /dev/null)" ]; then
    log "Service $2 $1 (systemd)"
    systemctl $1 $2 || :
  else
    log "Service $2 $1 (init)"
    /etc/init.d/$2 $1 || :
    /etc/init.d/$2 status || :
  fi
}

# Mount persistent /srv directory, unless disabled.
if [ -z "$DISABLE_SRV_MOUNT" ]; then
  if [ -x /tmp/mount-bootstrap ]; then
    log "Mounting persistent /srv directory."
    /tmp/mount-bootstrap /srv
  fi
fi

# Add /srv/local/bin to path, if it exists.
if [ -d /srv/local/bin ]; then
  PATH=${PATH}:/srv/local/bin
fi

create_persistent_dir() {

  # If the source directory exists.
  if [ -d /$1 ]; then
    # If the persistent does not.
    if [ ! -d /srv/$1 ]; then
      log "Creating persistent directory: /srv/${1}."
      mkdir -p /srv/${1}
      cp -a /$1 /srv/${1}/../
    fi
  fi
}

if [ -x /tmp/mount-bootstrap ]; then
  # Create persistent directories if the /srv directory has been mounted.
  create_persistent_dir var/lib/xen
  create_persistent_dir var/log/xen
  create_persistent_dir etc/libvirt
  create_persistent_dir var/lib/libvirt
  create_persistent_dir var/log/libvirt
  create_persistent_dir root
  create_persistent_dir home
  create_persistent_dir var/lib/docker
  create_persistent_dir var/lib/containers
fi

# If this is the first run, persist the ssh host keys.
if [ -d /srv/bootstrap ] && [ ! -d /srv/bootstrap/ssh ]; then
  log "Creating persistent ssh host keys."
  mkdir -p /srv/bootstrap/ssh
  cp -p /etc/ssh/ssh_host*    /srv/bootstrap/ssh
fi

bind_mount() {

  src="$1"
  dst="$1"
  [ -n "$2" ] && dst="$2"
  # If the destination mount point does not exist, there is nothing to do.
  [ ! -e /$dst ] && return
  if [ -d /srv/$src ]; then
    if mount --bind /srv/$src /$dst ; then
      log "Bind mounting /${dst}."
    else
      log "Bind mount of /${dst} failed."
    fi
  fi
}

# Mount persistent root.
bind_mount root

# Add new users to the persistent home directory.
# This can happen if an existing bootstrap configuration is used on a clean cloud image and the
# user-data specifies new users.
for user in $(ls /home) ; do
  if [ ! -d "/srv/home/$user" ]; then
    log "Adding user $user to persistent home directory."
    mv /home/$user /srv/home/
  fi
done

# Mount persistent home.
bind_mount home

copyifdifferent() {

  if [ ! -e $1 ]; then
    log "Source file '$1' does not exist: Nothing to copy."
  elif diff $1 $2 >/dev/null 2>&1 ; then
    log "Destination file '$2' matches source: No need to copy."
  else
    log "Updating file '$2'."
    cp -p $1 $2
    FILES_CHANGED="true"
  fi
}

# Copy ssh identifiers.
FILES_CHANGED="false"
if [ -d /tmp/bootstrap/ssh ]; then 
  mkdir -p /etc/ssh
  copyifdifferent /tmp/bootstrap/ssh/ssh_host_dsa_key          /etc/ssh/ssh_host_dsa_key
  copyifdifferent /tmp/bootstrap/ssh/ssh_host_dsa_key.pub      /etc/ssh/ssh_host_dsa_key.pub
  copyifdifferent /tmp/bootstrap/ssh/ssh_host_ecdsa_key        /etc/ssh/ssh_host_ecdsa_key
  copyifdifferent /tmp/bootstrap/ssh/ssh_host_ecdsa_key.pub    /etc/ssh/ssh_host_ecdsa_key.pub
  copyifdifferent /tmp/bootstrap/ssh/ssh_host_ed25519_key      /etc/ssh/ssh_host_ed25519_key
  copyifdifferent /tmp/bootstrap/ssh/ssh_host_ed25519_key.pub  /etc/ssh/ssh_host_ed25519_key.pub
  copyifdifferent /tmp/bootstrap/ssh/ssh_host_rsa_key          /etc/ssh/ssh_host_rsa_key
  copyifdifferent /tmp/bootstrap/ssh/ssh_host_rsa_key.pub      /etc/ssh/ssh_host_rsa_key.pub
  copyifdifferent /tmp/bootstrap/ssh/sshd_config               /etc/ssh/sshd_config
  copyifdifferent /tmp/bootstrap/ssh/sshd-crypto-policy.txt    /etc/ssh/sshd-crypto-policy.txt
  SSHD_RESTART="$FILES_CHANGED"
fi

# The sshd-crypto-policy.txt file is generated by the secure-sshd script.
if [ -e /etc/ssh/sshd-crypto-policy.txt ]; then
  if ! diff /etc/ssh/sshd-crypto-policy.txt /etc/crypto-policies/back-ends/opensshserver.config >/dev/null 2>&1 ; then
    SSHD_RESTART="true"
    log "Updating link '/etc/crypto-policies/back-ends/opensshserver.config'."
    ln -sf /etc/ssh/sshd-crypto-policy.txt /etc/crypto-policies/back-ends/opensshserver.config
  else
    log "Not updating link '/etc/crypto-policies/back-ends/opensshserver.config'."
  fi
fi

# Enable google authenticator, if needed.
if $(dirname $0)/enable-authenticator-if-needed ; then
  log "Info: Google authenticator enabled!"
  SSHD_RESTART="true"
fi

# Ensure proper host key permissions.
chmod 600 /etc/ssh/ssh_host*
chmod 644 /etc/ssh/ssh_host*.pub

# Restart sshd?
if [ "$SSHD_RESTART" = "true" ]; then
  log "Restarting ssh daemon."
  if [ -x /sbin/setup-alpine ]; then
    /etc/init.d/sshd restart
  else
    systemctl restart sshd
  fi
fi

# Setup persistent apk cache for alpine.
if [ -x /sbin/setup-alpine ]; then
  if [ -d /srv/apkcache ]; then
    log "Setting up persistent apk cache for Alpine!"
    setup-apkcache /srv/apkcache
  fi
  #?? setup-apkrepos -1
fi

# Stop the libvirtd daemon, if it's running and there is a bootstrap volume.
if [ -n "$(ps aux | grep -i [l]ibvirtd)" ] && [ -x /tmp/mount-bootstrap ]; then
  service_control stop libvirtd
fi

# Bind xen and libvirt directories.  These will only be bound if both the source 
# and destination directories exist.
bind_mount var/lib/xen
bind_mount var/log/xen
bind_mount etc/libvirt
bind_mount var/lib/libvirt
bind_mount var/log/libvirt

# Mount persistent container directories.
bind_mount var/lib/docker
bind_mount var/lib/containers

[ -e /tmp/skip_network_reconfig ] && NO_NETWORKING="true"

# Copy network scripts.
if [ -n "$NO_NETWORKING" ]; then
  log "Skipping network configuration."
else
  if [ -x /tmp/bootstrap/setup-networking ]; then
    # There is a network setup script, so it should do the NetworkManager restart.
    NETWORK_RECONFIGURED=
    log "Configuring network with setup-networking script."
    /tmp/bootstrap/setup-networking
  elif [ -d /tmp/bootstrap/network-scripts ]; then
    log "Copying network scripts."
    # Remove all but the loopback device scripts
    [ -f /etc/sysconfig/network-scripts/ifcfg-lo ] && mv /etc/sysconfig/network-scripts/ifcfg-lo /etc/sysconfig/network-scripts/ifcfx-lo
    rm -f /etc/sysconfig/network-scripts/ifcfg-*
    [ -f /etc/sysconfig/network-scripts/ifcfx-lo ] && mv /etc/sysconfig/network-scripts/ifcfx-lo /etc/sysconfig/network-scripts/ifcfg-lo
    cp -a /tmp/bootstrap/network-scripts/* /etc/sysconfig/network-scripts
    # Force Networking restart.
    NETWORK_RECONFIGURED="true"
  fi
  if [ -f /tmp/bootstrap/network/interfaces ]; then
    log "Copying network interfaces."
    cp -a /tmp/bootstrap/network/interfaces /etc/network/interfaces
    NETWORK_RECONFIGURED="true"
  fi
fi

wait_for_internet_poll() {
  # Wait up to 45 seconds for internet connectivity.
  for try in {0..15} ; do
    [ "$try" != "0" ] && sleep 2s
    log "Checking for internet connectivity."
    ping -q -c 1 -W 1 8.8.8.8 >/dev/null && break
  done
}

wait_for_internet() {

  if wait_for_internet_poll ; then
    log "Internet is up!"
    IP="$(ip route get 8.8.8.8 | awk -F'src ' 'NR==1{split($2,a," ");print a[1]}')"
    msg="IPv4 Address is: ${IP}."
    log "$msg"
    # Put this in the dmesg log.
    echo $msg >/dev/kmsg
  else
    log "Internet is not up!"
  fi
}

restart_network() {

  if ! systemctl is-active --quiet NetworkManager ; then
    systemctl restart NetworkManager
  elif ! systemctl is-active --quiet systemd-networkd ; then
    systemctl restart systemd-networkd
  else
    log "Warning: Don't know how to restart networking."
  fi
}

# Start/restart networking.
if [ -n "$NO_NETWORKING" ]; then
  log "Skipping network restart."
elif [ -n "$NETWORK_RECONFIGURED" ]; then
  # Only restart network if it has been reconfigured.
  if [ -x /sbin/setup-alpine ]; then
    # Alpine
    log "Restarting network (Alpine/Other)."
    /etc/init.d/networking restart
  elif [ -d /etc/yum.repos.d ]; then
    # centos/redhat/fedora
    log "Restarting NetworkManager (Redhat/Fedora/Centos)"
    restart_network
  elif [ ! -z "$(command -v apt-get 2> /dev/null)" ]; then
    # debian/ubuntu
    log "Starting networking (Debian/Ubuntu)"
    restart_network
  else
    log "Warning: Don't know how to restart networking."
  fi
fi

# Wait for the network to come up.
wait_for_internet

# Start the libvirtd, if it exists on the boot device and is not running.
if [ ! -z "$(command -v libvirtd 2> /dev/null)" ] && [ -z "$(ps aux | grep -i [l]ibvirtd)" ]; then
  service_control start libvirtd
fi

if [ -x /etc/sysconfig/network-scripts/ec2net-functions ]; then
  # Remove extranneous log messages from Amazon Linux 2.
  sed -i \
      -e 's@ logger --tag ec2net ".get_meta. Trying to get@ #logger --tag ec2net "[get_meta] Trying to get@' \
      -e 's@ logger --tag ec2net ".rewrite_aliases.@ #logger --tag ec2net "[rewrite_aliases]@' \
      /etc/sysconfig/network-scripts/ec2net-functions
fi

# Execute the startup script.
start_script="/tmp/bootstrap/start"
[ ! -x $start_script ] && start_script="/tmp/bootstrap/startup"
if [ -x $start_script ]; then
  log "Executing startup script."
  $start_script >>$LOG
  log "startup script finished."
else
  log "Not using startup script."
fi

log "Bootstrap startup completed!"

echo "Exiting ${0}." >/dev/kmsg


# Rotate log file history.
[ -e /srv/bootstrap/bootstrap.log.5 ] && rm /srv/bootstrap/bootstrap.log.5
[ -e /srv/bootstrap/bootstrap.log.4 ] && mv /srv/bootstrap/bootstrap.log.4 /srv/bootstrap/bootstrap.log.5
[ -e /srv/bootstrap/bootstrap.log.3 ] && mv /srv/bootstrap/bootstrap.log.3 /srv/bootstrap/bootstrap.log.4
[ -e /srv/bootstrap/bootstrap.log.2 ] && mv /srv/bootstrap/bootstrap.log.2 /srv/bootstrap/bootstrap.log.3
[ -e /srv/bootstrap/bootstrap.log.1 ] && mv /srv/bootstrap/bootstrap.log.1 /srv/bootstrap/bootstrap.log.2
[ -e /srv/bootstrap/bootstrap.log   ] && mv /srv/bootstrap/bootstrap.log   /srv/bootstrap/bootstrap.log.1

# Save log to persistent storage.
[ -d /srv/bootstrap ] && cp -p /tmp/bootstrap.log /srv/bootstrap/

# Make sure exit code is good.
true

exit 0

